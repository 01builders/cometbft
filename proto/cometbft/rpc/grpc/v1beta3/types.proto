syntax = "proto3";
package cometbft.rpc.grpc.v1beta3;
option  go_package = "github.com/cometbft/cometbft/api/cometbft/rpc/grpc/v1beta3";

import "cometbft/rpc/grpc/v1beta1/types.proto";
import "cometbft/abci/v1beta3/types.proto";

import "cometbft/types/v2/types.proto";
import "cometbft/p2p/v1/types.proto";
import "cometbft/crypto/v1/keys.proto";
import "cometbft/types/v2/validator.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

// ResponseBroadcastTx is a response of broadcasting the transaction.
message ResponseBroadcastTx {
  cometbft.abci.v1beta3.ResponseCheckTx check_tx  = 1;
  cometbft.abci.v1beta3.ExecTxResult    tx_result = 2;
}

// BroadcastAPI is an API for broadcasting transactions.
//
// Deprecated: This API will be superseded by a more comprehensive gRPC-based
// broadcast API, and is scheduled for removal after v0.38.
service BroadcastAPI {
  // Ping the connection.
  rpc Ping(v1beta1.RequestPing) returns (v1beta1.ResponsePing);
  // BroadcastTx broadcasts a transaction.
  rpc BroadcastTx(v1beta1.RequestBroadcastTx) returns (v1beta3.ResponseBroadcastTx);
}

// BlockAPI is an API for querying blocks.

service BlockAPI {
  // BlockByHash returns a block by its hash.
  rpc BlockByHash(BlockByHashRequest) returns (stream StreamedBlockByHashResponse);
  // BlockByHeight returns a block by its height.
  rpc BlockByHeight(BlockByHeightRequest) returns (stream StreamedBlockByHeightResponse);
  // Commit returns the commit of a block.
  rpc Commit(CommitRequest) returns (CommitResponse);
  // ValidatorSet returns the validator set of a block.
  rpc ValidatorSet(ValidatorSetRequest) returns (ValidatorSetResponse);
  // SubscribeNewHeights subscribes to new heights.
  rpc SubscribeNewHeights(SubscribeNewHeightsRequest) returns (stream NewHeightEvent);
  // Status returns the status of the node.
  rpc Status(StatusRequest) returns (StatusResponse);
}


// BlockByHashRequest is a request to get a block by its hash.
message BlockByHashRequest {
    bytes hash  = 1;
    bool  prove = 2;
  }
  
  // BlockByHeightRequest is a request to get a block by its height.
  message BlockByHeightRequest {
    // Height the requested block height.
    // If height is equal to 0, the latest height stored in the block store
    // will be used.
    int64 height = 1;
    // Prove set to true to return the parts proofs.
    bool prove = 2;
  }
  
  // CommitRequest is a request to get the commit of a block.
  message CommitRequest {
    // Height the requested block commit height.
    // If height is equal to 0, the latest height stored in the block store
    // will be used.
    int64 height = 1;
  }
  
  // ValidatorSetRequest is a request to get the validator set of a block.
  message ValidatorSetRequest {
    // Height the requested validator set height.
    // If height is equal to 0, the latest height stored in the block store
    // will be used.
    int64 height = 1;
  }
  
  // SubscribeNewHeightsRequest is a request to subscribe to new heights.
  message SubscribeNewHeightsRequest {}
  
  // StatusRequest is a request to get the status of the node.
  message StatusRequest {}


  // StreamedBlockByHashResponse is a response to a BlockByHashRequest.
  message StreamedBlockByHashResponse {
      cometbft.types.v2.Part         block_part    = 1;
      // Commit is only set in the first part, and
      // it stays nil in the remaining ones.
      cometbft.types.v2.Commit       commit        = 2;
      // ValidatorSet is only set in the first part, and
      // it stays nil in the remaining ones.
      cometbft.types.v2.ValidatorSet validator_set = 3;
      bool                          is_last       = 4;
    }
    
    // StreamedBlockByHeightResponse is a response to a BlockByHeightRequest.
    message StreamedBlockByHeightResponse {
      cometbft.types.v2.Part block_part = 1;
      // Commit is only set in the first part, and
      // it stays nil in the remaining ones.
      cometbft.types.v2.Commit commit = 2;
      // ValidatorSet is only set in the first part, and
      // it stays nil in the remaining ones.
      cometbft.types.v2.ValidatorSet validator_set = 3;
      bool                       is_last    = 4;
    }
    
    // CommitResponse is a response to a CommitRequest.
    message CommitResponse {
      cometbft.types.v2.Commit commit = 1;
    }
    
    // ValidatorSetResponse is a response to a ValidatorSetRequest.
    message ValidatorSetResponse {
      // ValidatorSet the requested validator set.
      cometbft.types.v2.ValidatorSet validator_set = 1;
      // Height the height corresponding to the returned
      // validator set.
      int64 height = 2;
    }
    
    // NewHeightEvent is an event that indicates a new height.
    message NewHeightEvent {
      int64 height = 1;
      bytes hash   = 2;
    }
    
    // StatusResponse is a response to a StatusRequest.
    message StatusResponse {
      cometbft.p2p.v1.DefaultNodeInfo node_info      = 1;
      SyncInfo                       sync_info      = 2;
      ValidatorInfo                  validator_info = 3;
    }
    
    // SyncInfo is information about the node's sync status.
    message SyncInfo {
      bytes                     latest_block_hash   = 1;
      bytes                     latest_app_hash     = 2;
      int64                     latest_block_height = 3;
      google.protobuf.Timestamp latest_block_time   = 4
          [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
    
        bytes                     earliest_block_hash   = 5;
      bytes                     earliest_app_hash     = 6;
      int64                     earliest_block_height = 7;
      google.protobuf.Timestamp earliest_block_time   = 8
          [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
    
      bool catching_up = 9;
    }
    
    // ValidatorInfo is information about a validator.
    message ValidatorInfo {
      bytes                       address      = 1;
      cometbft.crypto.v1.PublicKey pub_key      = 2;
      int64                       voting_power = 3;
    }