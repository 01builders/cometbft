diff --git a/mempool/cache.go b/mempool/cache.go
index 3c8748ff4..0f1a9f43e 100644
--- a/mempool/cache.go
+++ b/mempool/cache.go
@@ -26,6 +26,9 @@ type TxCache interface {
 	// Has reports whether tx is present in the cache. Checking for presence is
 	// not treated as an access of the value.
 	Has(tx types.Tx) bool
+
+	// HasKey reports whether the given key is present in the cache.
+	HasKey(key types.TxKey) bool
 }
 
 var _ TxCache = (*LRUTxCache)(nil)
@@ -89,10 +92,14 @@ func (c *LRUTxCache) Push(tx types.Tx) bool {
 }
 
 func (c *LRUTxCache) Remove(tx types.Tx) {
+	key := tx.Key()
+	c.RemoveTxByKey(key)
+}
+
+func (c *LRUTxCache) RemoveTxByKey(key types.TxKey) {
 	c.mtx.Lock()
 	defer c.mtx.Unlock()
 
-	key := tx.Key()
 	e := c.cacheMap[key]
 	delete(c.cacheMap, key)
 
@@ -109,12 +116,21 @@ func (c *LRUTxCache) Has(tx types.Tx) bool {
 	return ok
 }
 
+func (c *LRUTxCache) HasKey(key types.TxKey) bool {
+	c.mtx.Lock()
+	defer c.mtx.Unlock()
+
+	_, ok := c.cacheMap[key]
+	return ok
+}
+
 // NopTxCache defines a no-op raw transaction cache.
 type NopTxCache struct{}
 
 var _ TxCache = (*NopTxCache)(nil)
 
-func (NopTxCache) Reset()             {}
-func (NopTxCache) Push(types.Tx) bool { return true }
-func (NopTxCache) Remove(types.Tx)    {}
-func (NopTxCache) Has(types.Tx) bool  { return false }
+func (NopTxCache) Reset()                  {}
+func (NopTxCache) Push(types.Tx) bool      { return true }
+func (NopTxCache) Remove(types.Tx)         {}
+func (NopTxCache) Has(types.Tx) bool       { return false }
+func (NopTxCache) HasKey(types.TxKey) bool { return false }
