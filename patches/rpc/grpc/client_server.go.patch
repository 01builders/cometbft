diff --git a/rpc/grpc/client_server.go b/rpc/grpc/client_server.go
index 39c6859c1..af227864e 100644
--- a/rpc/grpc/client_server.go
+++ b/rpc/grpc/client_server.go
@@ -3,8 +3,11 @@ package coregrpc
 import (
 	"net"
 
+	"github.com/tendermint/tendermint/rpc/core"
+
 	"golang.org/x/net/context"
 	"google.golang.org/grpc"
+	"google.golang.org/grpc/credentials/insecure"
 
 	cmtnet "github.com/tendermint/tendermint/libs/net"
 )
@@ -20,20 +23,74 @@ type Config struct {
 func StartGRPCServer(ln net.Listener) error {
 	grpcServer := grpc.NewServer()
 	RegisterBroadcastAPIServer(grpcServer, &broadcastAPI{})
-	return grpcServer.Serve(ln)
+	blockAPI := NewBlockAPI()
+	RegisterBlockAPIServer(grpcServer, blockAPI)
+	blobstreamAPI := NewBlobstreamAPI()
+	RegisterBlobstreamAPIServer(grpcServer, blobstreamAPI)
+	errCh := make(chan error, 2)
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+	go func() {
+		errCh <- blockAPI.StartNewBlockEventListener(ctx)
+	}()
+	go func() {
+		errCh <- grpcServer.Serve(ln)
+	}()
+	defer grpcServer.GracefulStop()
+	defer func(api *BlockAPI, ctx context.Context) {
+		err := api.Stop(ctx)
+		if err != nil {
+			core.GetEnvironment().Logger.Error("error stopping block api", "err", err)
+		}
+	}(blockAPI, ctx)
+	// blocks until one errors or returns nil
+	return <-errCh
 }
 
 // StartGRPCClient dials the gRPC server using protoAddr and returns a new
 // BroadcastAPIClient.
 func StartGRPCClient(protoAddr string) BroadcastAPIClient {
-	//nolint:staticcheck // SA1019 Existing use of deprecated but supported dial option.
-	conn, err := grpc.Dial(protoAddr, grpc.WithInsecure(), grpc.WithContextDialer(dialerFunc))
+	conn, err := grpc.Dial(protoAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithContextDialer(dialerFunc)) //nolint:staticcheck
 	if err != nil {
 		panic(err)
 	}
 	return NewBroadcastAPIClient(conn)
 }
 
+// StartBlockAPIGRPCClient dials the gRPC server using protoAddr and returns a new
+// BlockAPIClient.
+func StartBlockAPIGRPCClient(protoAddr string, opts ...grpc.DialOption) (BlockAPIClient, error) {
+	if len(opts) == 0 {
+		opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
+	}
+	opts = append(opts, grpc.WithContextDialer(dialerFunc))
+	conn, err := grpc.Dial( //nolint:staticcheck
+		protoAddr,
+		opts...,
+	)
+	if err != nil {
+		return nil, err
+	}
+	return NewBlockAPIClient(conn), nil
+}
+
 func dialerFunc(ctx context.Context, addr string) (net.Conn, error) {
 	return cmtnet.Connect(addr)
 }
+
+// StartBlobstreamAPIGRPCClient dials the gRPC server using protoAddr and returns a new
+// BlobstreamAPIClient.
+func StartBlobstreamAPIGRPCClient(protoAddr string, opts ...grpc.DialOption) (BlobstreamAPIClient, error) {
+	if len(opts) == 0 {
+		opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
+	}
+	opts = append(opts, grpc.WithContextDialer(dialerFunc))
+	conn, err := grpc.Dial( //nolint:staticcheck
+		protoAddr,
+		opts...,
+	)
+	if err != nil {
+		return nil, err
+	}
+	return NewBlobstreamAPIClient(conn), nil
+}
