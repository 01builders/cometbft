diff --git a/evidence/reactor.go b/evidence/reactor.go
index f214c85c0..b69f5646f 100644
--- a/evidence/reactor.go
+++ b/evidence/reactor.go
@@ -24,6 +24,9 @@ const (
 	broadcastEvidenceIntervalS = 10
 	// If a message fails wait this much before sending it again
 	peerRetryMessageIntervalMS = 100
+
+	// ReactorIncomingMessageQueueSize the size of the reactor's message queue.
+	ReactorIncomingMessageQueueSize = 1
 )
 
 // Reactor handles evpool evidence broadcasting amongst peers.
@@ -38,7 +41,7 @@ func NewReactor(evpool *Pool) *Reactor {
 	evR := &Reactor{
 		evpool: evpool,
 	}
-	evR.BaseReactor = *p2p.NewBaseReactor("Evidence", evR)
+	evR.BaseReactor = *p2p.NewBaseReactor("Evidence", evR, p2p.WithIncomingQueueSize(ReactorIncomingMessageQueueSize))
 	return evR
 }
 
@@ -175,7 +178,7 @@ func (evR *Reactor) broadcastEvidenceRoutine(peer p2p.Peer) {
 
 // Returns the message to send to the peer, or nil if the evidence is invalid for the peer.
 // If message is nil, we should sleep and try again.
-func (evR Reactor) prepareEvidenceMessage(
+func (evR *Reactor) prepareEvidenceMessage(
 	peer p2p.Peer,
 	ev types.Evidence,
 ) (evis []types.Evidence) {
@@ -222,6 +225,10 @@ func (evR Reactor) prepareEvidenceMessage(
 	return []types.Evidence{ev}
 }
 
+func (evR *Reactor) OnStop() {
+	evR.BaseReactor.OnStop()
+}
+
 // PeerState describes the state of a peer.
 type PeerState interface {
 	GetHeight() int64
