diff --git a/mempool/metrics.go b/mempool/metrics.go
index 84798f853..1d50ae67b 100644
--- a/mempool/metrics.go
+++ b/mempool/metrics.go
@@ -25,24 +25,39 @@ type Metrics struct {
 	// Histogram of transaction sizes, in bytes.
 	TxSizeBytes metrics.Histogram
 
-	// Number of failed transactions.
+	// FailedTxs defines the number of failed transactions. These were marked
+	// invalid by the application in either CheckTx or RecheckTx.
 	FailedTxs metrics.Counter
 
-	// RejectedTxs defines the number of rejected transactions. These are
-	// transactions that passed CheckTx but failed to make it into the mempool
-	// due to resource limits, e.g. mempool is full and no lower priority
-	// transactions exist in the mempool.
-	RejectedTxs metrics.Counter
-
 	// EvictedTxs defines the number of evicted transactions. These are valid
 	// transactions that passed CheckTx and existed in the mempool but were later
-	// evicted to make room for higher priority valid transactions that passed
-	// CheckTx.
+	// evicted to make room for higher priority valid transactions
 	EvictedTxs metrics.Counter
 
+	// ExpiredTxs defines transactions that were removed from the mempool due
+	// to a TTL
+	ExpiredTxs metrics.Counter
+
+	// SuccessfulTxs defines the number of transactions that successfully made
+	// it into a block.
+	SuccessfulTxs metrics.Counter
+
 	// Number of times transactions are rechecked in the mempool.
 	RecheckTimes metrics.Counter
 
+	// AlreadySeenTxs defines the number of transactions that entered the
+	// mempool which were already present in the mempool. This is a good
+	// indicator of the degree of duplication in message gossiping.
+	AlreadySeenTxs metrics.Counter
+
+	// RequestedTxs defines the number of times that the node requested a
+	// tx to a peer
+	RequestedTxs metrics.Counter
+
+	// RerequestedTxs defines the number of times that a requested tx
+	// never received a response in time and a new request was made.
+	RerequestedTxs metrics.Counter
+
 	// Number of connections being actively used for gossiping transactions
 	// (experimental feature).
 	ActiveOutboundConnections metrics.Gauge
@@ -86,18 +101,25 @@ func PrometheusMetrics(namespace string, labelsAndValues ...string) *Metrics {
 			Help:      "Number of failed transactions.",
 		}, labels).With(labelsAndValues...),
 
-		RejectedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
+		EvictedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
 			Namespace: namespace,
 			Subsystem: MetricsSubsystem,
-			Name:      "rejected_txs",
-			Help:      "Number of rejected transactions.",
+			Name:      "evicted_txs",
+			Help:      "Number of evicted transactions.",
 		}, labels).With(labelsAndValues...),
 
-		EvictedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
+		ExpiredTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
 			Namespace: namespace,
 			Subsystem: MetricsSubsystem,
-			Name:      "evicted_txs",
-			Help:      "Number of evicted transactions.",
+			Name:      "expired_txs",
+			Help:      "Number of expired transactions.",
+		}, labels).With(labelsAndValues...),
+
+		SuccessfulTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
+			Namespace: namespace,
+			Subsystem: MetricsSubsystem,
+			Name:      "successful_txs",
+			Help:      "Number of transactions that successfully made it into a block.",
 		}, labels).With(labelsAndValues...),
 
 		RecheckTimes: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
@@ -107,6 +129,26 @@ func PrometheusMetrics(namespace string, labelsAndValues ...string) *Metrics {
 			Help:      "Number of times transactions are rechecked in the mempool.",
 		}, labels).With(labelsAndValues...),
 
+		AlreadySeenTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
+			Namespace: namespace,
+			Subsystem: MetricsSubsystem,
+			Name:      "already_seen_txs",
+			Help:      "Number of transactions that entered the mempool but were already present in the mempool.",
+		}, labels).With(labelsAndValues...),
+
+		RequestedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
+			Namespace: namespace,
+			Subsystem: MetricsSubsystem,
+			Name:      "requested_txs",
+			Help:      "Number of initial requests for a transaction",
+		}, labels).With(labelsAndValues...),
+
+		RerequestedTxs: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
+			Namespace: namespace,
+			Subsystem: MetricsSubsystem,
+			Name:      "rerequested_txs",
+			Help:      "Number of times a transaction was requested again after a previous request timed out",
+		}, labels).With(labelsAndValues...),
 		ActiveOutboundConnections: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
 			Namespace: namespace,
 			Subsystem: MetricsSubsystem,
@@ -123,9 +165,13 @@ func NopMetrics() *Metrics {
 		SizeBytes:                 discard.NewGauge(),
 		TxSizeBytes:               discard.NewHistogram(),
 		FailedTxs:                 discard.NewCounter(),
-		RejectedTxs:               discard.NewCounter(),
 		EvictedTxs:                discard.NewCounter(),
+		ExpiredTxs:                discard.NewCounter(),
+		SuccessfulTxs:             discard.NewCounter(),
 		RecheckTimes:              discard.NewCounter(),
+		AlreadySeenTxs:            discard.NewCounter(),
+		RequestedTxs:              discard.NewCounter(),
+		RerequestedTxs:            discard.NewCounter(),
 		ActiveOutboundConnections: discard.NewGauge(),
 	}
 }
