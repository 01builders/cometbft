diff --git a/rpc/openapi/openapi.yaml b/rpc/openapi/openapi.yaml
index f96b05ed1..7e8047260 100644
--- a/rpc/openapi/openapi.yaml
+++ b/rpc/openapi/openapi.yaml
@@ -295,7 +295,7 @@ paths:
                 $ref: "#/components/schemas/ErrorResponse"
   /net_info:
     get:
-      summary: Network informations
+      summary: Network information
       operationId: net_info
       tags:
         - Info
@@ -439,6 +439,64 @@ paths:
             application/json:
               schema:
                 $ref: "#/components/schemas/ErrorResponse"
+  /header:
+    get:
+      summary: Get header at a specified height
+      operationId: header
+      parameters:
+        - in: query
+          name: height
+          schema:
+            type: integer
+            default: 0
+            example: 1
+          description: height to return. If no height is provided, it will fetch the latest header.
+      tags:
+        - Info
+      description: |
+        Get Header.
+      responses:
+        "200":
+          description: Header informations.
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/BlockHeader"
+        "500":
+          description: Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/ErrorResponse"
+  /header_by_hash:
+    get:
+      summary: Get header by hash
+      operationId: header_by_hash
+      parameters:
+        - in: query
+          name: hash
+          description: header hash
+          required: true
+          schema:
+            type: string
+            example: "0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED"
+      tags:
+        - Info
+      description: |
+        Get Header By Hash.
+      responses:
+        "200":
+          description: Header informations.
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/BlockHeader"
+        "500":
+          description: Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/ErrorResponse"
   /block:
     get:
       summary: Get block at a specified height
@@ -944,7 +1002,181 @@ paths:
             application/json:
               schema:
                 $ref: "#/components/schemas/ErrorResponse"
+  /prove_shares:
+    get:
+      summary: Prove shares for a given share range.
+      description: |
+        Generates a proof of inclusion for a range of shares to the data root.
+        Note: shares are referenced by their range: startShare to endShare.
+        The share range is end exclusive.
+        Deprecated: Use '/prove_shares_v2' instead.
+      operationId: prove_shares
+      tags:
+        - Info
+      parameters:
+        - in: query
+          name: height
+          description: The block height
+          schema:
+            type: integer
+            default: 1
+            example: 1
+        - in: query
+          name: startShare
+          description: The starting share index
+          schema:
+            type: integer
+            default: 0
+            example: 0
+        - in: query
+          name: endShare
+          description: The end exclusive ending share index
+          schema:
+            type: integer
+            default: 1
+            example: 1
+      responses:
+        '200':
+          description: Successfully retrieved the share proof
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/ShareProof'
+        '500':
+          description: Internal server error
+
+  /prove_shares_v2:
+    get:
+      summary: Prove shares for a given share range.
+      description: |
+        Generates a proof of inclusion for a range of shares to the data root.
+        Note: shares are referenced by their range: startShare to endShare.
+        The share range is end exclusive.
+        Replaces '/prove_shares'
+      operationId: prove_shares_v2
+      tags:
+        - Info
+      parameters:
+        - in: query
+          name: height
+          description: The block height
+          schema:
+            type: integer
+            default: 1
+            example: 1
+        - in: query
+          name: startShare
+          description: The starting share index
+          schema:
+            type: integer
+            default: 0
+            example: 0
+        - in: query
+          name: endShare
+          description: The end exclusive ending share index
+          schema:
+            type: integer
+            default: 1
+            example: 1
+      responses:
+        '200':
+          description: Successfully retrieved the share proof
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/ResultShareProof'
+        '500':
+          description: Internal server error
+
+  /data_commitment:
+    get:
+      summary: Generates a data commitment for a range of blocks
+      description: |
+        Generates a data commitment over an ordered list of blocks matching the provided range.
+
+        The provided block range is end exclusive.
+      operationId: data_commitment
+      parameters:
+        - in: query
+          name: first_block
+          description: "the first block of the range of blocks"
+          required: true
+          schema:
+            type: integer
+            default: 1
+            example: 1
+        - in: query
+          name: last_block
+          description: "the last block of the range of blocks"
+          required: true
+          schema:
+            type: integer
+            default: 100
+            example: 100
+      tags:
+        - Info
+      responses:
+        "200":
+          description: Hex representation of the data commitment.
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/DataCommitmentResponse"
+        "500":
+          description: Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/ErrorResponse"
+  /data_root_inclusion_proof:
+    get:
+      summary: Creates a merkle proof for a data root
+      description: |
+        Generates a merkle proof for a data root defined by a height to the range of
+        blocks defined by first and last block.
 
+        The provided block range is end exclusive.
+      operationId: data_root_inclusion_proof
+      parameters:
+        - in: query
+          name: height
+          description: "the height of the block to prove"
+          required: true
+          schema:
+            type: integer
+            default: 5
+            example: 5
+        - in: query
+          name: first_block
+          description: "the first block of the range of blocks"
+          required: true
+          schema:
+            type: integer
+            default: 1
+            example: 1
+        - in: query
+          name: last_block
+          description: "the last block of the range of blocks"
+          required: true
+          schema:
+            type: integer
+            default: 100
+            example: 100
+      tags:
+        - Info
+      responses:
+        "200":
+          description: merkle proof of the height to the data commitment.
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/DataRootInclusionProofResponse"
+        "500":
+          description: Error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/ErrorResponse"
   /tx:
     get:
       summary: Get transactions by hash
@@ -2314,6 +2546,73 @@ components:
               example: "2"
           type: object
 
+    DataCommitmentResponse:
+      type: object
+      required:
+        - "jsonrpc"
+        - "id"
+        - "result"
+      properties:
+        jsonrpc:
+          type: string
+          example: "2.0"
+        id:
+          type: integer
+          example: 0
+        result:
+          required:
+            - "DataCommitment"
+          properties:
+            DataCommitment:
+              type: string
+              example: "D70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED"
+              description: the commitment is hex encoded
+          type: object
+
+    DataRootInclusionProofResponse:
+      type: object
+      required:
+        - "jsonrpc"
+        - "id"
+        - "result"
+      properties:
+        jsonrpc:
+          type: string
+          example: "2.0"
+        id:
+          type: integer
+          example: 0
+        result:
+          required:
+            - "Proof"
+          properties:
+            Proof:
+              required:
+                - "total"
+                - "index"
+                - "leaf_hash"
+                - "aunts"
+              properties:
+                total:
+                  type: string
+                  example: "2"
+                index:
+                  type: string
+                  example: "0"
+                leaf_hash:
+                  type: string
+                  example: "eoJxKCzF3m72Xiwb/Q43vJ37/2Sx8sfNS9JKJohlsYI="
+                  description: the leaf hash is base64 encoded
+                aunts:
+                  type: array
+                  items:
+                    type: string
+                  example:
+                    - "eWb+HG/eMmukrQj4vNGyFYb3nKQncAWacq4HF5eFzDY="
+                  description: the aunts are base64 encoded
+              type: object
+          type: object
+
     TxResponse:
       type: object
       required:
@@ -2368,8 +2667,98 @@ components:
             tx:
               type: string
               example: "5wHwYl3uCkaoo2GaChQmSIu8hxpJxLcCuIi8fiHN4TMwrRIU/Af1cEG7Rcs/6LjTl7YjRSymJfYaFAoFdWF0b20SCzE0OTk5OTk1MDAwEhMKDQoFdWF0b20SBDUwMDAQwJoMGmoKJuta6YchAwswBShaB1wkZBctLIhYqBC3JrAI28XGzxP+rVEticGEEkAc+khTkKL9CDE47aDvjEHvUNt+izJfT4KVF2v2JkC+bmlH9K08q3PqHeMI9Z5up+XMusnTqlP985KF+SI5J3ZOIhhNYWRlIGJ5IENpcmNsZSB3aXRoIGxvdmU="
+            proof:
+              type: object
+              $ref: '#/components/schemas/ShareProof'
+              nullable: true
+              description: Optional proof of the transaction, provided only when requested.
           type: object
 
+    ResultShareProof:
+      type: object
+      properties:
+        share_proof:
+          $ref: '#/components/schemas/ShareProof'
+      description: API proof response of a set of shares.
+    ShareProof:
+      type: object
+      properties:
+        data:
+          type: array
+          items:
+            type: string
+            format: byte
+          description: The raw shares that are being proven.
+        shareProofs:
+          type: array
+          items:
+            $ref: '#/components/schemas/NMTProof'
+          description: NMT proofs that the shares in Data exist in a set of rows.
+        namespaceID:
+          type: string
+          format: byte
+          description: The namespace id of the shares being proven.
+        rowProof:
+          $ref: '#/components/schemas/RowProof'
+        namespaceVersion:
+          type: integer
+          format: uint32
+          description: The version of the namespace used for verification.
+    NMTProof:
+      type: object
+      properties:
+        start:
+          type: integer
+          format: int32
+        end:
+          type: integer
+          format: int32
+        nodes:
+          type: array
+          items:
+            type: string
+            format: byte
+          description: Nodes used to verify the proof.
+        leaf_hash:
+          type: string
+          format: byte
+          description: Leaf hash necessary for proof of absence, if applicable.
+    RowProof:
+      type: object
+      properties:
+        rowRoots:
+          type: array
+          items:
+            type: string
+            format: byte
+        proofs:
+          type: array
+          items:
+            $ref: '#/components/schemas/Proof'
+        startRow:
+          type: integer
+          format: uint32
+        endRow:
+          type: integer
+          format: uint32
+    Proof:
+      type: object
+      description: Binary merkle proof
+      properties:
+        total:
+          type: integer
+          format: int64
+        index:
+          type: integer
+          format: int64
+        leafHash:
+          type: string
+          format: byte
+        aunts:
+          type: array
+          items:
+            type: string
+            format: byte
     ABCIInfoResponse:
       type: object
       required:
