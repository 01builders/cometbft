diff --git a/mempool/cache_test.go b/mempool/cache_test.go
index 44b2beb01..86b6ebc66 100644
--- a/mempool/cache_test.go
+++ b/mempool/cache_test.go
@@ -5,27 +5,37 @@ import (
 	"testing"
 
 	"github.com/stretchr/testify/require"
+	"github.com/tendermint/tendermint/types"
 )
 
-func TestCacheRemove(t *testing.T) {
-	cache := NewLRUTxCache(100)
-	numTxs := 10
+func populate(cache TxCache, numTxs int) ([][]byte, error) {
 
 	txs := make([][]byte, numTxs)
 	for i := 0; i < numTxs; i++ {
 		// probability of collision is 2**-256
 		txBytes := make([]byte, 32)
 		_, err := rand.Read(txBytes)
-		require.NoError(t, err)
+
+		if err != nil {
+			return nil, err
+		}
 
 		txs[i] = txBytes
 		cache.Push(txBytes)
-
-		// make sure its added to both the linked list and the map
-		require.Equal(t, i+1, len(cache.cacheMap))
-		require.Equal(t, i+1, cache.list.Len())
 	}
 
+	return txs, nil
+}
+
+func TestCacheRemove(t *testing.T) {
+	cache := NewLRUTxCache(100)
+	numTxs := 10
+
+	txs, err := populate(cache, numTxs)
+	require.NoError(t, err)
+	require.Equal(t, numTxs, len(cache.cacheMap))
+	require.Equal(t, numTxs, cache.list.Len())
+
 	for i := 0; i < numTxs; i++ {
 		cache.Remove(txs[i])
 		// make sure its removed from both the map and the linked list
@@ -33,3 +43,20 @@ func TestCacheRemove(t *testing.T) {
 		require.Equal(t, numTxs-(i+1), cache.list.Len())
 	}
 }
+
+func TestCacheRemoveByKey(t *testing.T) {
+	cache := NewLRUTxCache(100)
+	numTxs := 10
+
+	txs, err := populate(cache, numTxs)
+	require.NoError(t, err)
+	require.Equal(t, numTxs, len(cache.cacheMap))
+	require.Equal(t, numTxs, cache.list.Len())
+
+	for i := 0; i < numTxs; i++ {
+		cache.RemoveTxByKey(types.Tx(txs[i]).Key())
+		// make sure its removed from both the map and the linked list
+		require.Equal(t, numTxs-(i+1), len(cache.cacheMap))
+		require.Equal(t, numTxs-(i+1), cache.list.Len())
+	}
+}
