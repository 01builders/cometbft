diff --git a/rpc/client/local/local.go b/rpc/client/local/local.go
index 126a1267d..783f209d4 100644
--- a/rpc/client/local/local.go
+++ b/rpc/client/local/local.go
@@ -43,7 +43,7 @@ type Local struct {
 	ctx    *rpctypes.Context
 }
 
-// NewLocal configures a client that calls the Node directly.
+// New configures a client that calls the Node directly.
 //
 // Note that given how rpc/core works with package singletons, that
 // you can only have one node per process.  So make sure test cases
@@ -161,6 +161,10 @@ func (c *Local) Block(ctx context.Context, height *int64) (*ctypes.ResultBlock,
 	return core.Block(c.ctx, height)
 }
 
+func (c *Local) SignedBlock(ctx context.Context, height *int64) (*ctypes.ResultSignedBlock, error) {
+	return core.SignedBlock(c.ctx, height)
+}
+
 func (c *Local) BlockByHash(ctx context.Context, hash []byte) (*ctypes.ResultBlock, error) {
 	return core.BlockByHash(c.ctx, hash)
 }
@@ -169,10 +173,36 @@ func (c *Local) BlockResults(ctx context.Context, height *int64) (*ctypes.Result
 	return core.BlockResults(c.ctx, height)
 }
 
+func (c *Local) Header(ctx context.Context, height *int64) (*ctypes.ResultHeader, error) {
+	return core.Header(c.ctx, height)
+}
+
+func (c *Local) HeaderByHash(ctx context.Context, hash bytes.HexBytes) (*ctypes.ResultHeader, error) {
+	return core.HeaderByHash(c.ctx, hash)
+}
+
 func (c *Local) Commit(ctx context.Context, height *int64) (*ctypes.ResultCommit, error) {
 	return core.Commit(c.ctx, height)
 }
 
+func (c *Local) DataCommitment(
+	_ context.Context,
+	start uint64,
+	end uint64,
+) (*ctypes.ResultDataCommitment, error) {
+	return core.DataCommitment(c.ctx, start, end)
+}
+
+func (c *Local) DataRootInclusionProof(
+	_ context.Context,
+	height uint64,
+	start uint64,
+	end uint64,
+) (*ctypes.ResultDataRootInclusionProof, error) {
+	//nolint:gosec
+	return core.DataRootInclusionProof(c.ctx, int64(height), start, end)
+}
+
 func (c *Local) Validators(ctx context.Context, height *int64, page, perPage *int) (*ctypes.ResultValidators, error) {
 	return core.Validators(c.ctx, height, page, perPage)
 }
@@ -181,6 +211,28 @@ func (c *Local) Tx(ctx context.Context, hash []byte, prove bool) (*ctypes.Result
 	return core.Tx(c.ctx, hash, prove)
 }
 
+// ProveShares
+// Deprecated: Use ProveSharesV2 instead.
+func (c *Local) ProveShares(
+	ctx context.Context,
+	height uint64,
+	startShare uint64,
+	endShare uint64,
+) (types.ShareProof, error) {
+	//nolint:gosec
+	return core.ProveShares(c.ctx, int64(height), startShare, endShare)
+}
+
+func (c *Local) ProveSharesV2(
+	ctx context.Context,
+	height uint64,
+	startShare uint64,
+	endShare uint64,
+) (*ctypes.ResultShareProof, error) {
+	//nolint:gosec
+	return core.ProveSharesV2(c.ctx, int64(height), startShare, endShare)
+}
+
 func (c *Local) TxSearch(
 	_ context.Context,
 	query string,
@@ -201,6 +253,10 @@ func (c *Local) BlockSearch(
 	return core.BlockSearch(c.ctx, query, page, perPage, orderBy)
 }
 
+func (c *Local) TxStatus(ctx context.Context, hash []byte) (*ctypes.ResultTxStatus, error) {
+	return core.TxStatus(c.ctx, hash)
+}
+
 func (c *Local) BroadcastEvidence(ctx context.Context, ev types.Evidence) (*ctypes.ResultBroadcastEvidence, error) {
 	return core.BroadcastEvidence(c.ctx, ev)
 }
@@ -284,6 +340,7 @@ func (c *Local) resubscribe(subscriber string, q cmtpubsub.Query) types.Subscrip
 		}
 
 		attempts++
+		//nolint:gosec
 		time.Sleep((10 << uint(attempts)) * time.Millisecond) // 10ms -> 20ms -> 40ms
 	}
 }
