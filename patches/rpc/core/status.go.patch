diff --git a/rpc/core/status.go b/rpc/core/status.go
index 605d3107d..1261d6d6e 100644
--- a/rpc/core/status.go
+++ b/rpc/core/status.go
@@ -13,7 +13,7 @@ import (
 // Status returns CometBFT status including node info, pubkey, latest block
 // hash, app hash, block height and time.
 // More: https://docs.cometbft.com/v0.34/rpc/#/Info/status
-func Status(ctx *rpctypes.Context) (*ctypes.ResultStatus, error) {
+func Status(_ *rpctypes.Context) (*ctypes.ResultStatus, error) {
 	var (
 		earliestBlockHeight   int64
 		earliestBlockHash     cmtbytes.HexBytes
@@ -21,6 +21,7 @@ func Status(ctx *rpctypes.Context) (*ctypes.ResultStatus, error) {
 		earliestBlockTimeNano int64
 	)
 
+	env := GetEnvironment()
 	if earliestBlockMeta := env.BlockStore.LoadBaseMeta(); earliestBlockMeta != nil {
 		earliestBlockHeight = earliestBlockMeta.Header.Height
 		earliestAppHash = earliestBlockMeta.Header.AppHash
@@ -52,7 +53,7 @@ func Status(ctx *rpctypes.Context) (*ctypes.ResultStatus, error) {
 	}
 
 	result := &ctypes.ResultStatus{
-		NodeInfo: env.P2PTransport.NodeInfo().(p2p.DefaultNodeInfo),
+		NodeInfo: GetNodeInfo(env, latestHeight),
 		SyncInfo: ctypes.SyncInfo{
 			LatestBlockHash:     latestBlockHash,
 			LatestAppHash:       latestAppHash,
@@ -75,6 +76,7 @@ func Status(ctx *rpctypes.Context) (*ctypes.ResultStatus, error) {
 }
 
 func validatorAtHeight(h int64) *types.Validator {
+	env := GetEnvironment()
 	vals, err := env.StateStore.LoadValidators(h)
 	if err != nil {
 		return nil
@@ -83,3 +85,27 @@ func validatorAtHeight(h int64) *types.Validator {
 	_, val := vals.GetByAddress(privValAddress)
 	return val
 }
+
+// GetNodeInfo returns the node info with the app version set to the latest app
+// version from the state store.
+//
+// This function is necessary because upstream CometBFT does not support
+// upgrading app versions for a running binary. Therefore the
+// env.P2PTransport.NodeInfo.ProtocolVersion.App is expected to be set on node
+// start-up and never updated. Celestia supports upgrading the app version for a
+// running binary so the env.P2PTransport.NodeInfo.ProtocolVersion.App will be
+// incorrect if a node upgraded app versions without restarting. This function
+// corrects that issue by fetching the latest app version from the state store.
+func GetNodeInfo(env *Environment, latestHeight int64) p2p.DefaultNodeInfo {
+	nodeInfo := env.P2PTransport.NodeInfo().(p2p.DefaultNodeInfo)
+
+	consensusParams, err := env.StateStore.LoadConsensusParams(latestHeight)
+	if err != nil {
+		// use the default app version if we can't load the consensus params (i.e. height 0)
+		return nodeInfo
+	}
+
+	// override the default app version with the latest app version
+	nodeInfo.ProtocolVersion.App = consensusParams.Version.AppVersion
+	return nodeInfo
+}
