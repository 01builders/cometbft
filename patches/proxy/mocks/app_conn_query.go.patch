diff --git a/proxy/mocks/app_conn_query.go b/proxy/mocks/app_conn_query.go
index 544ab765e..f2b6185cf 100644
--- a/proxy/mocks/app_conn_query.go
+++ b/proxy/mocks/app_conn_query.go
@@ -17,7 +17,15 @@ type AppConnQuery struct {
 func (_m *AppConnQuery) EchoSync(_a0 string) (*types.ResponseEcho, error) {
 	ret := _m.Called(_a0)
 
+	if len(ret) == 0 {
+		panic("no return value specified for EchoSync")
+	}
+
 	var r0 *types.ResponseEcho
+	var r1 error
+	if rf, ok := ret.Get(0).(func(string) (*types.ResponseEcho, error)); ok {
+		return rf(_a0)
+	}
 	if rf, ok := ret.Get(0).(func(string) *types.ResponseEcho); ok {
 		r0 = rf(_a0)
 	} else {
@@ -26,7 +34,6 @@ func (_m *AppConnQuery) EchoSync(_a0 string) (*types.ResponseEcho, error) {
 		}
 	}
 
-	var r1 error
 	if rf, ok := ret.Get(1).(func(string) error); ok {
 		r1 = rf(_a0)
 	} else {
@@ -40,6 +47,10 @@ func (_m *AppConnQuery) EchoSync(_a0 string) (*types.ResponseEcho, error) {
 func (_m *AppConnQuery) Error() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Error")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -54,7 +65,15 @@ func (_m *AppConnQuery) Error() error {
 func (_m *AppConnQuery) InfoSync(_a0 types.RequestInfo) (*types.ResponseInfo, error) {
 	ret := _m.Called(_a0)
 
+	if len(ret) == 0 {
+		panic("no return value specified for InfoSync")
+	}
+
 	var r0 *types.ResponseInfo
+	var r1 error
+	if rf, ok := ret.Get(0).(func(types.RequestInfo) (*types.ResponseInfo, error)); ok {
+		return rf(_a0)
+	}
 	if rf, ok := ret.Get(0).(func(types.RequestInfo) *types.ResponseInfo); ok {
 		r0 = rf(_a0)
 	} else {
@@ -63,7 +82,6 @@ func (_m *AppConnQuery) InfoSync(_a0 types.RequestInfo) (*types.ResponseInfo, er
 		}
 	}
 
-	var r1 error
 	if rf, ok := ret.Get(1).(func(types.RequestInfo) error); ok {
 		r1 = rf(_a0)
 	} else {
@@ -77,7 +95,15 @@ func (_m *AppConnQuery) InfoSync(_a0 types.RequestInfo) (*types.ResponseInfo, er
 func (_m *AppConnQuery) QuerySync(_a0 types.RequestQuery) (*types.ResponseQuery, error) {
 	ret := _m.Called(_a0)
 
+	if len(ret) == 0 {
+		panic("no return value specified for QuerySync")
+	}
+
 	var r0 *types.ResponseQuery
+	var r1 error
+	if rf, ok := ret.Get(0).(func(types.RequestQuery) (*types.ResponseQuery, error)); ok {
+		return rf(_a0)
+	}
 	if rf, ok := ret.Get(0).(func(types.RequestQuery) *types.ResponseQuery); ok {
 		r0 = rf(_a0)
 	} else {
@@ -86,7 +112,6 @@ func (_m *AppConnQuery) QuerySync(_a0 types.RequestQuery) (*types.ResponseQuery,
 		}
 	}
 
-	var r1 error
 	if rf, ok := ret.Get(1).(func(types.RequestQuery) error); ok {
 		r1 = rf(_a0)
 	} else {
@@ -96,13 +121,12 @@ func (_m *AppConnQuery) QuerySync(_a0 types.RequestQuery) (*types.ResponseQuery,
 	return r0, r1
 }
 
-type mockConstructorTestingTNewAppConnQuery interface {
+// NewAppConnQuery creates a new instance of AppConnQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+// The first argument is typically a *testing.T value.
+func NewAppConnQuery(t interface {
 	mock.TestingT
 	Cleanup(func())
-}
-
-// NewAppConnQuery creates a new instance of AppConnQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
-func NewAppConnQuery(t mockConstructorTestingTNewAppConnQuery) *AppConnQuery {
+}) *AppConnQuery {
 	mock := &AppConnQuery{}
 	mock.Mock.Test(t)
 
