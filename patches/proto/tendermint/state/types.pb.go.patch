diff --git a/proto/tendermint/state/types.pb.go b/proto/tendermint/state/types.pb.go
index 6b57ca1ae..122cda8eb 100644
--- a/proto/tendermint/state/types.pb.go
+++ b/proto/tendermint/state/types.pb.go
@@ -330,6 +330,8 @@ type State struct {
 	LastResultsHash []byte `protobuf:"bytes,12,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash,omitempty"`
 	// the latest AppHash we've received from calling abci.Commit()
 	AppHash []byte `protobuf:"bytes,13,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`
+	// timeouts to be used for the next block height
+	Timeouts types.TimeoutsInfo `protobuf:"bytes,15,opt,name=timeouts,proto3" json:"timeouts"`
 }
 
 func (m *State) Reset()         { *m = State{} }
@@ -463,6 +465,13 @@ func (m *State) GetAppHash() []byte {
 	return nil
 }
 
+func (m *State) GetTimeouts() types.TimeoutsInfo {
+	if m != nil {
+		return m.Timeouts
+	}
+	return types.TimeoutsInfo{}
+}
+
 func init() {
 	proto.RegisterType((*ABCIResponses)(nil), "tendermint.state.ABCIResponses")
 	proto.RegisterType((*ValidatorsInfo)(nil), "tendermint.state.ValidatorsInfo")
@@ -475,58 +484,59 @@ func init() {
 func init() { proto.RegisterFile("tendermint/state/types.proto", fileDescriptor_ccfacf933f22bf93) }
 
 var fileDescriptor_ccfacf933f22bf93 = []byte{
-	// 805 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x8e, 0xe3, 0x44,
-	0x10, 0x8e, 0xc9, 0x6e, 0x7e, 0xca, 0x93, 0x64, 0xb7, 0x07, 0x21, 0x6f, 0x96, 0x75, 0xb2, 0xe1,
-	0x47, 0x23, 0x0e, 0x8e, 0xb4, 0x1c, 0x10, 0x97, 0x95, 0xd6, 0x09, 0xb0, 0x91, 0x56, 0x08, 0x3c,
-	0xa3, 0x39, 0x70, 0xb1, 0x3a, 0x71, 0x8f, 0x6d, 0x91, 0xd8, 0x96, 0xbb, 0x13, 0x86, 0x07, 0xe0,
-	0x3e, 0x57, 0xde, 0x68, 0x8e, 0x73, 0x44, 0x1c, 0x06, 0xc8, 0xbc, 0x08, 0xea, 0x1f, 0xdb, 0x9d,
-	0x84, 0x91, 0x06, 0xed, 0xad, 0x5d, 0xf5, 0xd5, 0x57, 0x5f, 0x55, 0x57, 0xb5, 0xe1, 0x63, 0x46,
-	0x92, 0x80, 0xe4, 0xab, 0x38, 0x61, 0x63, 0xca, 0x30, 0x23, 0x63, 0xf6, 0x6b, 0x46, 0xa8, 0x93,
-	0xe5, 0x29, 0x4b, 0xd1, 0x93, 0xca, 0xeb, 0x08, 0x6f, 0xff, 0xc3, 0x30, 0x0d, 0x53, 0xe1, 0x1c,
-	0xf3, 0x93, 0xc4, 0xf5, 0x9f, 0x6b, 0x2c, 0x78, 0xbe, 0x88, 0x75, 0x92, 0xbe, 0x9e, 0x42, 0xd8,
-	0x77, 0xbc, 0xc3, 0x03, 0xef, 0x06, 0x2f, 0xe3, 0x00, 0xb3, 0x34, 0x57, 0x88, 0x17, 0x07, 0x88,
-	0x0c, 0xe7, 0x78, 0x55, 0x10, 0xd8, 0x9a, 0x7b, 0x43, 0x72, 0x1a, 0xa7, 0xc9, 0x4e, 0x82, 0x41,
-	0x98, 0xa6, 0xe1, 0x92, 0x8c, 0xc5, 0xd7, 0x7c, 0x7d, 0x31, 0x66, 0xf1, 0x8a, 0x50, 0x86, 0x57,
-	0x99, 0x04, 0x8c, 0xfe, 0x34, 0xa0, 0xf3, 0xc6, 0x9d, 0xcc, 0x3c, 0x42, 0xb3, 0x34, 0xa1, 0x84,
-	0xa2, 0x09, 0x98, 0x01, 0x59, 0xc6, 0x1b, 0x92, 0xfb, 0xec, 0x92, 0x5a, 0xc6, 0xb0, 0x7e, 0x62,
-	0xbe, 0x1a, 0x39, 0x5a, 0x33, 0x78, 0x91, 0x4e, 0x11, 0x30, 0x95, 0xd8, 0xb3, 0x4b, 0x0f, 0x82,
-	0xe2, 0x48, 0xd1, 0x6b, 0x68, 0x93, 0x24, 0xf0, 0xe7, 0xcb, 0x74, 0xf1, 0xb3, 0xf5, 0xc1, 0xd0,
-	0x38, 0x31, 0x5f, 0xbd, 0xbc, 0x97, 0xe2, 0x9b, 0x24, 0x70, 0x39, 0xd0, 0x6b, 0x11, 0x75, 0x42,
-	0x53, 0x30, 0xe7, 0x24, 0x8c, 0x13, 0xc5, 0x50, 0x17, 0x0c, 0x9f, 0xdc, 0xcb, 0xe0, 0x72, 0xac,
-	0xe4, 0x80, 0x79, 0x79, 0x1e, 0xfd, 0x66, 0x40, 0xf7, 0xbc, 0x68, 0x28, 0x9d, 0x25, 0x17, 0x29,
-	0x9a, 0x40, 0xa7, 0x6c, 0xb1, 0x4f, 0x09, 0xb3, 0x0c, 0x41, 0x6d, 0xeb, 0xd4, 0xb2, 0x81, 0x65,
-	0xe0, 0x29, 0x61, 0xde, 0xd1, 0x46, 0xfb, 0x42, 0x0e, 0x1c, 0x2f, 0x31, 0x65, 0x7e, 0x44, 0xe2,
-	0x30, 0x62, 0xfe, 0x22, 0xc2, 0x49, 0x48, 0x02, 0x51, 0x67, 0xdd, 0x7b, 0xca, 0x5d, 0x6f, 0x85,
-	0x67, 0x22, 0x1d, 0xa3, 0xdf, 0x0d, 0x38, 0x9e, 0x70, 0x9d, 0x09, 0x5d, 0xd3, 0x1f, 0xc4, 0xfd,
-	0x09, 0x31, 0x1e, 0x3c, 0x59, 0x14, 0x66, 0x5f, 0xde, 0xab, 0xd2, 0xf3, 0xf2, 0x50, 0xcf, 0x1e,
-	0x81, 0xfb, 0xe8, 0xfa, 0x76, 0x50, 0xf3, 0x7a, 0x8b, 0x5d, 0xf3, 0xff, 0xd6, 0x46, 0xe1, 0xe9,
-	0xce, 0xfd, 0x0b, 0x61, 0xdf, 0x42, 0x97, 0xf7, 0xd7, 0xcf, 0x0b, 0xab, 0x92, 0x35, 0x70, 0xf6,
-	0x77, 0xc2, 0xd9, 0x09, 0xf6, 0x3a, 0x3c, 0xac, 0x9a, 0xa5, 0x8f, 0xa0, 0x21, 0x75, 0xa8, 0xfc,
-	0xea, 0x6b, 0x14, 0x41, 0xf3, 0x5c, 0x4e, 0x2b, 0x7a, 0x03, 0xed, 0xb2, 0x04, 0x95, 0xe5, 0x85,
-	0x9e, 0x45, 0x4d, 0x75, 0x55, 0xbe, 0x2a, 0xbc, 0x8a, 0x42, 0x7d, 0x68, 0xd1, 0xf4, 0x82, 0xfd,
-	0x82, 0x73, 0x22, 0xf2, 0xb4, 0xbd, 0xf2, 0x7b, 0xf4, 0x4f, 0x03, 0x1e, 0x9f, 0x72, 0xa1, 0xe8,
-	0x6b, 0x68, 0x2a, 0x2e, 0x95, 0xe6, 0xd9, 0x61, 0x31, 0x4a, 0x94, 0x4a, 0x51, 0xe0, 0xd1, 0xe7,
-	0xd0, 0x5a, 0x44, 0x38, 0x4e, 0xfc, 0x58, 0x36, 0xb2, 0xed, 0x9a, 0xdb, 0xdb, 0x41, 0x73, 0xc2,
-	0x6d, 0xb3, 0xa9, 0xd7, 0x14, 0xce, 0x59, 0x80, 0x3e, 0x83, 0x6e, 0x9c, 0xc4, 0x2c, 0xc6, 0x4b,
-	0xd5, 0x7e, 0xab, 0x2b, 0xca, 0xee, 0x28, 0xab, 0xec, 0x3c, 0xfa, 0x02, 0xc4, 0x3d, 0xc8, 0xd9,
-	0x2e, 0x90, 0x75, 0x81, 0xec, 0x71, 0x87, 0x18, 0x5e, 0x85, 0xf5, 0xa0, 0xa3, 0x61, 0xe3, 0xc0,
-	0x7a, 0x74, 0xa8, 0x5d, 0xce, 0x87, 0x88, 0x9a, 0x4d, 0xdd, 0x63, 0xae, 0x7d, 0x7b, 0x3b, 0x30,
-	0xdf, 0x15, 0x54, 0xb3, 0xa9, 0x67, 0x96, 0xbc, 0xb3, 0x00, 0xbd, 0x83, 0x9e, 0xc6, 0xc9, 0x5f,
-	0x04, 0xeb, 0xb1, 0x60, 0xed, 0x3b, 0xf2, 0xb9, 0x70, 0x8a, 0xe7, 0xc2, 0x39, 0x2b, 0x9e, 0x0b,
-	0xb7, 0xc5, 0x69, 0xaf, 0xfe, 0x1a, 0x18, 0x5e, 0xa7, 0xe4, 0xe2, 0x5e, 0xf4, 0x1d, 0xf4, 0x12,
-	0x72, 0xc9, 0xfc, 0x72, 0x43, 0xa8, 0xd5, 0x78, 0xd0, 0x4e, 0x75, 0x79, 0x58, 0xb5, 0x9e, 0xe8,
-	0x35, 0x80, 0xc6, 0xd1, 0x7c, 0x10, 0x87, 0x16, 0xc1, 0x85, 0x88, 0xb2, 0x34, 0x92, 0xd6, 0xc3,
-	0x84, 0xf0, 0x30, 0x4d, 0xc8, 0x04, 0x6c, 0x7d, 0x85, 0x2a, 0xbe, 0x72, 0x9b, 0xda, 0xe2, 0xb2,
-	0x9e, 0x57, 0xdb, 0x54, 0x45, 0xab, 0xbd, 0xfa, 0xcf, 0xdd, 0x86, 0xf7, 0xdc, 0xed, 0xef, 0xe1,
-	0xd3, 0x9d, 0xdd, 0xde, 0xe3, 0x2f, 0xe5, 0x99, 0x42, 0xde, 0x50, 0x5b, 0xf6, 0x5d, 0xa2, 0x42,
-	0x63, 0x31, 0x88, 0x39, 0xa1, 0xeb, 0x25, 0xa3, 0x7e, 0x84, 0x69, 0x64, 0x1d, 0x0d, 0x8d, 0x93,
-	0x23, 0x39, 0x88, 0x9e, 0xb4, 0xbf, 0xc5, 0x34, 0x42, 0xcf, 0xa0, 0x85, 0xb3, 0x4c, 0x42, 0x3a,
-	0x02, 0xd2, 0xc4, 0x59, 0xc6, 0x5d, 0xee, 0x8f, 0xd7, 0x5b, 0xdb, 0xb8, 0xd9, 0xda, 0xc6, 0xdf,
-	0x5b, 0xdb, 0xb8, 0xba, 0xb3, 0x6b, 0x37, 0x77, 0x76, 0xed, 0x8f, 0x3b, 0xbb, 0xf6, 0xd3, 0x57,
-	0x61, 0xcc, 0xa2, 0xf5, 0xdc, 0x59, 0xa4, 0xab, 0xb1, 0xfe, 0x23, 0xab, 0x8e, 0xf2, 0x6f, 0xba,
-	0xff, 0x1f, 0x9e, 0x37, 0x84, 0xfd, 0xcb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x1a, 0xb9,
-	0x2e, 0xa2, 0x07, 0x00, 0x00,
+	// 829 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
+	0x14, 0x8f, 0xc9, 0x6e, 0x93, 0x3c, 0x37, 0xc9, 0xee, 0x14, 0x21, 0x6f, 0x96, 0x75, 0xb2, 0xe1,
+	0x8f, 0x2a, 0x0e, 0x8e, 0xb4, 0x1c, 0x10, 0x97, 0x45, 0xeb, 0x04, 0x68, 0xa4, 0x0a, 0x81, 0x5b,
+	0xf5, 0xc0, 0xc5, 0x9a, 0xc4, 0x53, 0xdb, 0x22, 0xb1, 0x2d, 0xcf, 0x24, 0x94, 0x0f, 0xc0, 0xbd,
+	0x57, 0xae, 0x7c, 0x9a, 0x1e, 0x7b, 0x44, 0x1c, 0x0a, 0x4a, 0xbf, 0x08, 0x9a, 0x3f, 0xb6, 0x27,
+	0x09, 0x95, 0x8a, 0xb8, 0x8d, 0xdf, 0xfb, 0xbd, 0xdf, 0xfb, 0xbd, 0x37, 0xef, 0x8d, 0xe1, 0x43,
+	0x46, 0x92, 0x80, 0xe4, 0xcb, 0x38, 0x61, 0x23, 0xca, 0x30, 0x23, 0x23, 0xf6, 0x4b, 0x46, 0xa8,
+	0x93, 0xe5, 0x29, 0x4b, 0xd1, 0xb3, 0xca, 0xeb, 0x08, 0x6f, 0xef, 0xfd, 0x30, 0x0d, 0x53, 0xe1,
+	0x1c, 0xf1, 0x93, 0xc4, 0xf5, 0x5e, 0x6a, 0x2c, 0x78, 0x36, 0x8f, 0x75, 0x92, 0x9e, 0x9e, 0x42,
+	0xd8, 0xb7, 0xbc, 0x83, 0x3d, 0xef, 0x1a, 0x2f, 0xe2, 0x00, 0xb3, 0x34, 0x57, 0x88, 0x57, 0x7b,
+	0x88, 0x0c, 0xe7, 0x78, 0x59, 0x10, 0xd8, 0x9a, 0x7b, 0x4d, 0x72, 0x1a, 0xa7, 0xc9, 0x56, 0x82,
+	0x7e, 0x98, 0xa6, 0xe1, 0x82, 0x8c, 0xc4, 0xd7, 0x6c, 0x75, 0x39, 0x62, 0xf1, 0x92, 0x50, 0x86,
+	0x97, 0x99, 0x04, 0x0c, 0xff, 0x34, 0xa0, 0xfd, 0xce, 0x1d, 0x4f, 0x3d, 0x42, 0xb3, 0x34, 0xa1,
+	0x84, 0xa2, 0x31, 0x98, 0x01, 0x59, 0xc4, 0x6b, 0x92, 0xfb, 0xec, 0x8a, 0x5a, 0xc6, 0xa0, 0x7e,
+	0x6c, 0xbe, 0x19, 0x3a, 0x5a, 0x33, 0x78, 0x91, 0x4e, 0x11, 0x30, 0x91, 0xd8, 0xf3, 0x2b, 0x0f,
+	0x82, 0xe2, 0x48, 0xd1, 0x5b, 0x68, 0x91, 0x24, 0xf0, 0x67, 0x8b, 0x74, 0xfe, 0x93, 0xf5, 0xde,
+	0xc0, 0x38, 0x36, 0xdf, 0xbc, 0x7e, 0x90, 0xe2, 0xeb, 0x24, 0x70, 0x39, 0xd0, 0x6b, 0x12, 0x75,
+	0x42, 0x13, 0x30, 0x67, 0x24, 0x8c, 0x13, 0xc5, 0x50, 0x17, 0x0c, 0x1f, 0x3d, 0xc8, 0xe0, 0x72,
+	0xac, 0xe4, 0x80, 0x59, 0x79, 0x1e, 0xfe, 0x6a, 0x40, 0xe7, 0xa2, 0x68, 0x28, 0x9d, 0x26, 0x97,
+	0x29, 0x1a, 0x43, 0xbb, 0x6c, 0xb1, 0x4f, 0x09, 0xb3, 0x0c, 0x41, 0x6d, 0xeb, 0xd4, 0xb2, 0x81,
+	0x65, 0xe0, 0x19, 0x61, 0xde, 0xe1, 0x5a, 0xfb, 0x42, 0x0e, 0x1c, 0x2d, 0x30, 0x65, 0x7e, 0x44,
+	0xe2, 0x30, 0x62, 0xfe, 0x3c, 0xc2, 0x49, 0x48, 0x02, 0x51, 0x67, 0xdd, 0x7b, 0xce, 0x5d, 0x27,
+	0xc2, 0x33, 0x96, 0x8e, 0xe1, 0x6f, 0x06, 0x1c, 0x8d, 0xb9, 0xce, 0x84, 0xae, 0xe8, 0xf7, 0xe2,
+	0xfe, 0x84, 0x18, 0x0f, 0x9e, 0xcd, 0x0b, 0xb3, 0x2f, 0xef, 0x55, 0xe9, 0x79, 0xbd, 0xaf, 0x67,
+	0x87, 0xc0, 0x7d, 0x72, 0x73, 0xd7, 0xaf, 0x79, 0xdd, 0xf9, 0xb6, 0xf9, 0x3f, 0x6b, 0xa3, 0xf0,
+	0x7c, 0xeb, 0xfe, 0x85, 0xb0, 0x6f, 0xa0, 0xc3, 0xfb, 0xeb, 0xe7, 0x85, 0x55, 0xc9, 0xea, 0x3b,
+	0xbb, 0x3b, 0xe1, 0x6c, 0x05, 0x7b, 0x6d, 0x1e, 0x56, 0xcd, 0xd2, 0x07, 0x70, 0x20, 0x75, 0xa8,
+	0xfc, 0xea, 0x6b, 0x18, 0x41, 0xe3, 0x42, 0x4e, 0x2b, 0x7a, 0x07, 0xad, 0xb2, 0x04, 0x95, 0xe5,
+	0x95, 0x9e, 0x45, 0x4d, 0x75, 0x55, 0xbe, 0x2a, 0xbc, 0x8a, 0x42, 0x3d, 0x68, 0xd2, 0xf4, 0x92,
+	0xfd, 0x8c, 0x73, 0x22, 0xf2, 0xb4, 0xbc, 0xf2, 0x7b, 0xf8, 0x7b, 0x03, 0x9e, 0x9e, 0x71, 0xa1,
+	0xe8, 0x4b, 0x68, 0x28, 0x2e, 0x95, 0xe6, 0xc5, 0x7e, 0x31, 0x4a, 0x94, 0x4a, 0x51, 0xe0, 0xd1,
+	0xa7, 0xd0, 0x9c, 0x47, 0x38, 0x4e, 0xfc, 0x58, 0x36, 0xb2, 0xe5, 0x9a, 0x9b, 0xbb, 0x7e, 0x63,
+	0xcc, 0x6d, 0xd3, 0x89, 0xd7, 0x10, 0xce, 0x69, 0x80, 0x3e, 0x81, 0x4e, 0x9c, 0xc4, 0x2c, 0xc6,
+	0x0b, 0xd5, 0x7e, 0xab, 0x23, 0xca, 0x6e, 0x2b, 0xab, 0xec, 0x3c, 0xfa, 0x0c, 0xc4, 0x3d, 0xc8,
+	0xd9, 0x2e, 0x90, 0x75, 0x81, 0xec, 0x72, 0x87, 0x18, 0x5e, 0x85, 0xf5, 0xa0, 0xad, 0x61, 0xe3,
+	0xc0, 0x7a, 0xb2, 0xaf, 0x5d, 0xce, 0x87, 0x88, 0x9a, 0x4e, 0xdc, 0x23, 0xae, 0x7d, 0x73, 0xd7,
+	0x37, 0x4f, 0x0b, 0xaa, 0xe9, 0xc4, 0x33, 0x4b, 0xde, 0x69, 0x80, 0x4e, 0xa1, 0xab, 0x71, 0xf2,
+	0x17, 0xc1, 0x7a, 0x2a, 0x58, 0x7b, 0x8e, 0x7c, 0x2e, 0x9c, 0xe2, 0xb9, 0x70, 0xce, 0x8b, 0xe7,
+	0xc2, 0x6d, 0x72, 0xda, 0xeb, 0xbf, 0xfa, 0x86, 0xd7, 0x2e, 0xb9, 0xb8, 0x17, 0x7d, 0x0b, 0xdd,
+	0x84, 0x5c, 0x31, 0xbf, 0xdc, 0x10, 0x6a, 0x1d, 0x3c, 0x6a, 0xa7, 0x3a, 0x3c, 0xac, 0x5a, 0x4f,
+	0xf4, 0x16, 0x40, 0xe3, 0x68, 0x3c, 0x8a, 0x43, 0x8b, 0xe0, 0x42, 0x44, 0x59, 0x1a, 0x49, 0xf3,
+	0x71, 0x42, 0x78, 0x98, 0x26, 0x64, 0x0c, 0xb6, 0xbe, 0x42, 0x15, 0x5f, 0xb9, 0x4d, 0x2d, 0x71,
+	0x59, 0x2f, 0xab, 0x6d, 0xaa, 0xa2, 0xd5, 0x5e, 0xfd, 0xeb, 0x6e, 0xc3, 0xff, 0xdc, 0xed, 0xef,
+	0xe0, 0xe3, 0xad, 0xdd, 0xde, 0xe1, 0x2f, 0xe5, 0x99, 0x42, 0xde, 0x40, 0x5b, 0xf6, 0x6d, 0xa2,
+	0x42, 0x63, 0x31, 0x88, 0x39, 0xa1, 0xab, 0x05, 0xa3, 0x7e, 0x84, 0x69, 0x64, 0x1d, 0x0e, 0x8c,
+	0xe3, 0x43, 0x39, 0x88, 0x9e, 0xb4, 0x9f, 0x60, 0x1a, 0xa1, 0x17, 0xd0, 0xc4, 0x59, 0x26, 0x21,
+	0x6d, 0x01, 0x69, 0xe0, 0x2c, 0x13, 0xae, 0xaf, 0xa0, 0xc9, 0x87, 0x28, 0x5d, 0x31, 0x6a, 0x75,
+	0xf7, 0x37, 0x58, 0xbc, 0xd4, 0xe7, 0x0a, 0xc0, 0x9f, 0x17, 0x55, 0x5e, 0x19, 0xe4, 0xfe, 0x70,
+	0xb3, 0xb1, 0x8d, 0xdb, 0x8d, 0x6d, 0xfc, 0xbd, 0xb1, 0x8d, 0xeb, 0x7b, 0xbb, 0x76, 0x7b, 0x6f,
+	0xd7, 0xfe, 0xb8, 0xb7, 0x6b, 0x3f, 0x7e, 0x11, 0xc6, 0x2c, 0x5a, 0xcd, 0x9c, 0x79, 0xba, 0x1c,
+	0xe9, 0x7f, 0xc2, 0xea, 0x28, 0x7f, 0xc7, 0xbb, 0x3f, 0xf2, 0xd9, 0x81, 0xb0, 0x7f, 0xfe, 0x4f,
+	0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x97, 0xe8, 0x4f, 0xe3, 0x07, 0x00, 0x00,
 }
 
 func (m *ABCIResponses) Marshal() (dAtA []byte, err error) {
@@ -768,6 +778,16 @@ func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 	_ = i
 	var l int
 	_ = l
+	{
+		size, err := m.Timeouts.MarshalToSizedBuffer(dAtA[:i])
+		if err != nil {
+			return 0, err
+		}
+		i -= size
+		i = encodeVarintTypes(dAtA, i, uint64(size))
+	}
+	i--
+	dAtA[i] = 0x7a
 	if m.InitialHeight != 0 {
 		i = encodeVarintTypes(dAtA, i, uint64(m.InitialHeight))
 		i--
@@ -843,12 +863,12 @@ func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		i--
 		dAtA[i] = 0x32
 	}
-	n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastBlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastBlockTime):])
-	if err11 != nil {
-		return 0, err11
+	n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastBlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastBlockTime):])
+	if err12 != nil {
+		return 0, err12
 	}
-	i -= n11
-	i = encodeVarintTypes(dAtA, i, uint64(n11))
+	i -= n12
+	i = encodeVarintTypes(dAtA, i, uint64(n12))
 	i--
 	dAtA[i] = 0x2a
 	{
@@ -1031,6 +1051,8 @@ func (m *State) Size() (n int) {
 	if m.InitialHeight != 0 {
 		n += 1 + sovTypes(uint64(m.InitialHeight))
 	}
+	l = m.Timeouts.Size()
+	n += 1 + l + sovTypes(uint64(l))
 	return n
 }
 
@@ -2068,6 +2090,39 @@ func (m *State) Unmarshal(dAtA []byte) error {
 					break
 				}
 			}
+		case 15:
+			if wireType != 2 {
+				return fmt.Errorf("proto: wrong wireType = %d for field Timeouts", wireType)
+			}
+			var msglen int
+			for shift := uint(0); ; shift += 7 {
+				if shift >= 64 {
+					return ErrIntOverflowTypes
+				}
+				if iNdEx >= l {
+					return io.ErrUnexpectedEOF
+				}
+				b := dAtA[iNdEx]
+				iNdEx++
+				msglen |= int(b&0x7F) << shift
+				if b < 0x80 {
+					break
+				}
+			}
+			if msglen < 0 {
+				return ErrInvalidLengthTypes
+			}
+			postIndex := iNdEx + msglen
+			if postIndex < 0 {
+				return ErrInvalidLengthTypes
+			}
+			if postIndex > l {
+				return io.ErrUnexpectedEOF
+			}
+			if err := m.Timeouts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
+				return err
+			}
+			iNdEx = postIndex
 		default:
 			iNdEx = preIndex
 			skippy, err := skipTypes(dAtA[iNdEx:])
