diff --git a/consensus/metrics.go b/consensus/metrics.go
index dcaaae939..e76ef2d3a 100644
--- a/consensus/metrics.go
+++ b/consensus/metrics.go
@@ -22,6 +22,8 @@ const (
 type Metrics struct {
 	// Height of the chain.
 	Height metrics.Gauge
+	// The height when the metrics started from
+	StartHeight metrics.Gauge
 
 	// ValidatorLastSignedHeight of a validator.
 	ValidatorLastSignedHeight metrics.Gauge
@@ -48,6 +50,8 @@ type Metrics struct {
 
 	// Time between this and the last block.
 	BlockIntervalSeconds metrics.Histogram
+	// Block time in seconds.
+	BlockTimeSeconds metrics.Gauge
 
 	// Number of transactions.
 	NumTxs metrics.Gauge
@@ -57,9 +61,9 @@ type Metrics struct {
 	TotalTxs metrics.Gauge
 	// The latest block height.
 	CommittedHeight metrics.Gauge
-	// Whether or not a node is fast syncing. 1 if yes, 0 if no.
+	// Whether a node is fast syncing. 1 if yes, 0 if no.
 	FastSyncing metrics.Gauge
-	// Whether or not a node is state syncing. 1 if yes, 0 if no.
+	// Whether a node is state syncing. 1 if yes, 0 if no.
 	StateSyncing metrics.Gauge
 
 	// Number of blockparts transmitted by peer.
@@ -88,6 +92,12 @@ type Metrics struct {
 	// timestamp and the timestamp of the latest prevote in a round where 100%
 	// of the voting power on the network issued prevotes.
 	FullPrevoteMessageDelay metrics.Gauge
+
+	// The amount of proposals that were rejected by the application.
+	ApplicationRejectedProposals metrics.Counter
+
+	// The amount of proposals that failed to be received in time
+	TimedOutProposals metrics.Counter
 }
 
 // PrometheusMetrics returns Metrics build using Prometheus client library.
@@ -105,6 +115,12 @@ func PrometheusMetrics(namespace string, labelsAndValues ...string) *Metrics {
 			Name:      "height",
 			Help:      "Height of the chain.",
 		}, labels).With(labelsAndValues...),
+		StartHeight: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
+			Namespace: namespace,
+			Subsystem: MetricsSubsystem,
+			Name:      "start_height",
+			Help:      "Height that metrics began",
+		}, labels).With(labelsAndValues...),
 		Rounds: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
 			Namespace: namespace,
 			Subsystem: MetricsSubsystem,
@@ -171,6 +187,12 @@ func PrometheusMetrics(namespace string, labelsAndValues ...string) *Metrics {
 			Name:      "block_interval_seconds",
 			Help:      "Time between this and the last block.",
 		}, labels).With(labelsAndValues...),
+		BlockTimeSeconds: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
+			Namespace: namespace,
+			Subsystem: MetricsSubsystem,
+			Name:      "block_time_seconds",
+			Help:      "Duration between this block and the preceding one.",
+		}, labels).With(labelsAndValues...),
 		NumTxs: prometheus.NewGaugeFrom(stdprometheus.GaugeOpts{
 			Namespace: namespace,
 			Subsystem: MetricsSubsystem,
@@ -241,13 +263,26 @@ func PrometheusMetrics(namespace string, labelsAndValues ...string) *Metrics {
 			Help: "Difference in seconds between the proposal timestamp and the timestamp " +
 				"of the latest prevote that achieved 100% of the voting power in the prevote step.",
 		}, labels).With(labelsAndValues...),
+		ApplicationRejectedProposals: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
+			Namespace: namespace,
+			Subsystem: MetricsSubsystem,
+			Name:      "application_rejected_proposals",
+			Help:      "Number of proposals rejected by the application",
+		}, labels).With(labelsAndValues...),
+		TimedOutProposals: prometheus.NewCounterFrom(stdprometheus.CounterOpts{
+			Namespace: namespace,
+			Subsystem: MetricsSubsystem,
+			Name:      "timed_out_proposals",
+			Help:      "Number of proposals that failed to be received in time",
+		}, labels).With(labelsAndValues...),
 	}
 }
 
 // NopMetrics returns no-op Metrics.
 func NopMetrics() *Metrics {
 	return &Metrics{
-		Height: discard.NewGauge(),
+		Height:      discard.NewGauge(),
+		StartHeight: discard.NewGauge(),
 
 		ValidatorLastSignedHeight: discard.NewGauge(),
 
@@ -264,17 +299,20 @@ func NopMetrics() *Metrics {
 		ByzantineValidatorsPower: discard.NewGauge(),
 
 		BlockIntervalSeconds: discard.NewHistogram(),
+		BlockTimeSeconds:     discard.NewGauge(),
 
-		NumTxs:                    discard.NewGauge(),
-		BlockSizeBytes:            discard.NewGauge(),
-		TotalTxs:                  discard.NewGauge(),
-		CommittedHeight:           discard.NewGauge(),
-		FastSyncing:               discard.NewGauge(),
-		StateSyncing:              discard.NewGauge(),
-		BlockParts:                discard.NewCounter(),
-		BlockGossipPartsReceived:  discard.NewCounter(),
-		QuorumPrevoteMessageDelay: discard.NewGauge(),
-		FullPrevoteMessageDelay:   discard.NewGauge(),
+		NumTxs:                       discard.NewGauge(),
+		BlockSizeBytes:               discard.NewGauge(),
+		TotalTxs:                     discard.NewGauge(),
+		CommittedHeight:              discard.NewGauge(),
+		FastSyncing:                  discard.NewGauge(),
+		StateSyncing:                 discard.NewGauge(),
+		BlockParts:                   discard.NewCounter(),
+		BlockGossipPartsReceived:     discard.NewCounter(),
+		QuorumPrevoteMessageDelay:    discard.NewGauge(),
+		FullPrevoteMessageDelay:      discard.NewGauge(),
+		ApplicationRejectedProposals: discard.NewCounter(),
+		TimedOutProposals:            discard.NewCounter(),
 	}
 }
 
