diff --git a/proto/tendermint/mempool/message.go b/proto/tendermint/mempool/message.go
index e2e6c42a7..319453a1b 100644
--- a/proto/tendermint/mempool/message.go
+++ b/proto/tendermint/mempool/message.go
@@ -7,8 +7,12 @@ import (
 	"github.com/tendermint/tendermint/p2p"
 )
 
-var _ p2p.Wrapper = &Txs{}
-var _ p2p.Unwrapper = &Message{}
+var (
+	_ p2p.Wrapper   = &Txs{}
+	_ p2p.Wrapper   = &SeenTx{}
+	_ p2p.Wrapper   = &WantTx{}
+	_ p2p.Unwrapper = &Message{}
+)
 
 // Wrap implements the p2p Wrapper interface and wraps a mempool message.
 func (m *Txs) Wrap() proto.Message {
@@ -17,6 +21,20 @@ func (m *Txs) Wrap() proto.Message {
 	return mm
 }
 
+// Wrap implements the p2p Wrapper interface and wraps a mempool seen tx message.
+func (m *SeenTx) Wrap() proto.Message {
+	mm := &Message{}
+	mm.Sum = &Message_SeenTx{SeenTx: m}
+	return mm
+}
+
+// Wrap implements the p2p Wrapper interface and wraps a mempool want tx message.
+func (m *WantTx) Wrap() proto.Message {
+	mm := &Message{}
+	mm.Sum = &Message_WantTx{WantTx: m}
+	return mm
+}
+
 // Unwrap implements the p2p Wrapper interface and unwraps a wrapped mempool
 // message.
 func (m *Message) Unwrap() (proto.Message, error) {
@@ -24,6 +42,12 @@ func (m *Message) Unwrap() (proto.Message, error) {
 	case *Message_Txs:
 		return m.GetTxs(), nil
 
+	case *Message_SeenTx:
+		return m.GetSeenTx(), nil
+
+	case *Message_WantTx:
+		return m.GetWantTx(), nil
+
 	default:
 		return nil, fmt.Errorf("unknown message: %T", msg)
 	}
