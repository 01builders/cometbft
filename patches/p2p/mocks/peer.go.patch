diff --git a/p2p/mocks/peer.go b/p2p/mocks/peer.go
index a9151c7d8..805b4538a 100644
--- a/p2p/mocks/peer.go
+++ b/p2p/mocks/peer.go
@@ -22,6 +22,10 @@ type Peer struct {
 func (_m *Peer) CloseConn() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for CloseConn")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -41,6 +45,10 @@ func (_m *Peer) FlushStop() {
 func (_m *Peer) Get(_a0 string) interface{} {
 	ret := _m.Called(_a0)
 
+	if len(ret) == 0 {
+		panic("no return value specified for Get")
+	}
+
 	var r0 interface{}
 	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
 		r0 = rf(_a0)
@@ -57,6 +65,10 @@ func (_m *Peer) Get(_a0 string) interface{} {
 func (_m *Peer) GetRemovalFailed() bool {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for GetRemovalFailed")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func() bool); ok {
 		r0 = rf()
@@ -71,6 +83,10 @@ func (_m *Peer) GetRemovalFailed() bool {
 func (_m *Peer) ID() p2p.ID {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for ID")
+	}
+
 	var r0 p2p.ID
 	if rf, ok := ret.Get(0).(func() p2p.ID); ok {
 		r0 = rf()
@@ -81,10 +97,28 @@ func (_m *Peer) ID() p2p.ID {
 	return r0
 }
 
+// HasIPChanged provides a mock function with given fields:
+func (_m *Peer) HasIPChanged() bool {
+	ret := _m.Called()
+
+	var r0 bool
+	if rf, ok := ret.Get(0).(func() bool); ok {
+		r0 = rf()
+	} else {
+		r0 = ret.Get(0).(bool)
+	}
+
+	return r0
+}
+
 // IsOutbound provides a mock function with given fields:
 func (_m *Peer) IsOutbound() bool {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for IsOutbound")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func() bool); ok {
 		r0 = rf()
@@ -99,6 +133,10 @@ func (_m *Peer) IsOutbound() bool {
 func (_m *Peer) IsPersistent() bool {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for IsPersistent")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func() bool); ok {
 		r0 = rf()
@@ -113,6 +151,10 @@ func (_m *Peer) IsPersistent() bool {
 func (_m *Peer) IsRunning() bool {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for IsRunning")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func() bool); ok {
 		r0 = rf()
@@ -123,10 +165,42 @@ func (_m *Peer) IsRunning() bool {
 	return r0
 }
 
+// SendEnvelope provides a mock function with given fields: _a0
+func (_m *Peer) SendEnvelope(_a0 p2p.Envelope) bool {
+	ret := _m.Called(_a0)
+
+	var r0 bool
+	if rf, ok := ret.Get(0).(func(p2p.Envelope) bool); ok {
+		r0 = rf(_a0)
+	} else {
+		r0 = ret.Get(0).(bool)
+	}
+
+	return r0
+}
+
+// TrySendEnvelope provides a mock function with given fields: _a0
+func (_m *Peer) TrySendEnvelope(_a0 p2p.Envelope) bool {
+	ret := _m.Called(_a0)
+
+	var r0 bool
+	if rf, ok := ret.Get(0).(func(p2p.Envelope) bool); ok {
+		r0 = rf(_a0)
+	} else {
+		r0 = ret.Get(0).(bool)
+	}
+
+	return r0
+}
+
 // NodeInfo provides a mock function with given fields:
 func (_m *Peer) NodeInfo() p2p.NodeInfo {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for NodeInfo")
+	}
+
 	var r0 p2p.NodeInfo
 	if rf, ok := ret.Get(0).(func() p2p.NodeInfo); ok {
 		r0 = rf()
@@ -143,6 +217,10 @@ func (_m *Peer) NodeInfo() p2p.NodeInfo {
 func (_m *Peer) OnReset() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for OnReset")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -157,6 +235,10 @@ func (_m *Peer) OnReset() error {
 func (_m *Peer) OnStart() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for OnStart")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -176,6 +258,10 @@ func (_m *Peer) OnStop() {
 func (_m *Peer) Quit() <-chan struct{} {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Quit")
+	}
+
 	var r0 <-chan struct{}
 	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
 		r0 = rf()
@@ -192,6 +278,10 @@ func (_m *Peer) Quit() <-chan struct{} {
 func (_m *Peer) RemoteAddr() net.Addr {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for RemoteAddr")
+	}
+
 	var r0 net.Addr
 	if rf, ok := ret.Get(0).(func() net.Addr); ok {
 		r0 = rf()
@@ -208,6 +298,10 @@ func (_m *Peer) RemoteAddr() net.Addr {
 func (_m *Peer) RemoteIP() net.IP {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for RemoteIP")
+	}
+
 	var r0 net.IP
 	if rf, ok := ret.Get(0).(func() net.IP); ok {
 		r0 = rf()
@@ -224,6 +318,10 @@ func (_m *Peer) RemoteIP() net.IP {
 func (_m *Peer) Reset() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Reset")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -238,6 +336,10 @@ func (_m *Peer) Reset() error {
 func (_m *Peer) Send(_a0 byte, _a1 []byte) bool {
 	ret := _m.Called(_a0, _a1)
 
+	if len(ret) == 0 {
+		panic("no return value specified for Send")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func(byte, []byte) bool); ok {
 		r0 = rf(_a0, _a1)
@@ -267,6 +369,10 @@ func (_m *Peer) SetRemovalFailed() {
 func (_m *Peer) SocketAddr() *p2p.NetAddress {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for SocketAddr")
+	}
+
 	var r0 *p2p.NetAddress
 	if rf, ok := ret.Get(0).(func() *p2p.NetAddress); ok {
 		r0 = rf()
@@ -283,6 +389,10 @@ func (_m *Peer) SocketAddr() *p2p.NetAddress {
 func (_m *Peer) Start() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Start")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -297,6 +407,10 @@ func (_m *Peer) Start() error {
 func (_m *Peer) Status() conn.ConnectionStatus {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Status")
+	}
+
 	var r0 conn.ConnectionStatus
 	if rf, ok := ret.Get(0).(func() conn.ConnectionStatus); ok {
 		r0 = rf()
@@ -311,6 +425,10 @@ func (_m *Peer) Status() conn.ConnectionStatus {
 func (_m *Peer) Stop() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Stop")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -325,6 +443,10 @@ func (_m *Peer) Stop() error {
 func (_m *Peer) String() string {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for String")
+	}
+
 	var r0 string
 	if rf, ok := ret.Get(0).(func() string); ok {
 		r0 = rf()
@@ -339,6 +461,10 @@ func (_m *Peer) String() string {
 func (_m *Peer) TrySend(_a0 byte, _a1 []byte) bool {
 	ret := _m.Called(_a0, _a1)
 
+	if len(ret) == 0 {
+		panic("no return value specified for TrySend")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func(byte, []byte) bool); ok {
 		r0 = rf(_a0, _a1)
@@ -349,13 +475,12 @@ func (_m *Peer) TrySend(_a0 byte, _a1 []byte) bool {
 	return r0
 }
 
-type mockConstructorTestingTNewPeer interface {
+// NewPeer creates a new instance of Peer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+// The first argument is typically a *testing.T value.
+func NewPeer(t interface {
 	mock.TestingT
 	Cleanup(func())
-}
-
-// NewPeer creates a new instance of Peer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
-func NewPeer(t mockConstructorTestingTNewPeer) *Peer {
+}) *Peer {
 	mock := &Peer{}
 	mock.Mock.Test(t)
 
