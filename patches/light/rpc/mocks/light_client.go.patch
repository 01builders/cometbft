diff --git a/light/rpc/mocks/light_client.go b/light/rpc/mocks/light_client.go
index fabf73b01..3d0467dc3 100644
--- a/light/rpc/mocks/light_client.go
+++ b/light/rpc/mocks/light_client.go
@@ -21,6 +21,10 @@ type LightClient struct {
 func (_m *LightClient) ChainID() string {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for ChainID")
+	}
+
 	var r0 string
 	if rf, ok := ret.Get(0).(func() string); ok {
 		r0 = rf()
@@ -35,7 +39,15 @@ func (_m *LightClient) ChainID() string {
 func (_m *LightClient) TrustedLightBlock(height int64) (*types.LightBlock, error) {
 	ret := _m.Called(height)
 
+	if len(ret) == 0 {
+		panic("no return value specified for TrustedLightBlock")
+	}
+
 	var r0 *types.LightBlock
+	var r1 error
+	if rf, ok := ret.Get(0).(func(int64) (*types.LightBlock, error)); ok {
+		return rf(height)
+	}
 	if rf, ok := ret.Get(0).(func(int64) *types.LightBlock); ok {
 		r0 = rf(height)
 	} else {
@@ -44,7 +56,6 @@ func (_m *LightClient) TrustedLightBlock(height int64) (*types.LightBlock, error
 		}
 	}
 
-	var r1 error
 	if rf, ok := ret.Get(1).(func(int64) error); ok {
 		r1 = rf(height)
 	} else {
@@ -58,7 +69,15 @@ func (_m *LightClient) TrustedLightBlock(height int64) (*types.LightBlock, error
 func (_m *LightClient) Update(ctx context.Context, now time.Time) (*types.LightBlock, error) {
 	ret := _m.Called(ctx, now)
 
+	if len(ret) == 0 {
+		panic("no return value specified for Update")
+	}
+
 	var r0 *types.LightBlock
+	var r1 error
+	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (*types.LightBlock, error)); ok {
+		return rf(ctx, now)
+	}
 	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *types.LightBlock); ok {
 		r0 = rf(ctx, now)
 	} else {
@@ -67,7 +86,6 @@ func (_m *LightClient) Update(ctx context.Context, now time.Time) (*types.LightB
 		}
 	}
 
-	var r1 error
 	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
 		r1 = rf(ctx, now)
 	} else {
@@ -81,7 +99,15 @@ func (_m *LightClient) Update(ctx context.Context, now time.Time) (*types.LightB
 func (_m *LightClient) VerifyLightBlockAtHeight(ctx context.Context, height int64, now time.Time) (*types.LightBlock, error) {
 	ret := _m.Called(ctx, height, now)
 
+	if len(ret) == 0 {
+		panic("no return value specified for VerifyLightBlockAtHeight")
+	}
+
 	var r0 *types.LightBlock
+	var r1 error
+	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) (*types.LightBlock, error)); ok {
+		return rf(ctx, height, now)
+	}
 	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) *types.LightBlock); ok {
 		r0 = rf(ctx, height, now)
 	} else {
@@ -90,7 +116,6 @@ func (_m *LightClient) VerifyLightBlockAtHeight(ctx context.Context, height int6
 		}
 	}
 
-	var r1 error
 	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
 		r1 = rf(ctx, height, now)
 	} else {
@@ -100,13 +125,12 @@ func (_m *LightClient) VerifyLightBlockAtHeight(ctx context.Context, height int6
 	return r0, r1
 }
 
-type mockConstructorTestingTNewLightClient interface {
+// NewLightClient creates a new instance of LightClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+// The first argument is typically a *testing.T value.
+func NewLightClient(t interface {
 	mock.TestingT
 	Cleanup(func())
-}
-
-// NewLightClient creates a new instance of LightClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
-func NewLightClient(t mockConstructorTestingTNewLightClient) *LightClient {
+}) *LightClient {
 	mock := &LightClient{}
 	mock.Mock.Test(t)
 
