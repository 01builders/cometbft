diff --git a/p2p/mocks/peer_envelope_sender.go b/p2p/mocks/peer_envelope_sender.go
index 89f231104..ecdba0e3f 100644
--- a/p2p/mocks/peer_envelope_sender.go
+++ b/p2p/mocks/peer_envelope_sender.go
@@ -22,6 +22,10 @@ type PeerEnvelopeSender struct {
 func (_m *PeerEnvelopeSender) CloseConn() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for CloseConn")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -41,6 +45,10 @@ func (_m *PeerEnvelopeSender) FlushStop() {
 func (_m *PeerEnvelopeSender) Get(_a0 string) interface{} {
 	ret := _m.Called(_a0)
 
+	if len(ret) == 0 {
+		panic("no return value specified for Get")
+	}
+
 	var r0 interface{}
 	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
 		r0 = rf(_a0)
@@ -57,6 +65,10 @@ func (_m *PeerEnvelopeSender) Get(_a0 string) interface{} {
 func (_m *PeerEnvelopeSender) GetRemovalFailed() bool {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for GetRemovalFailed")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func() bool); ok {
 		r0 = rf()
@@ -71,6 +83,10 @@ func (_m *PeerEnvelopeSender) GetRemovalFailed() bool {
 func (_m *PeerEnvelopeSender) ID() p2p.ID {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for ID")
+	}
+
 	var r0 p2p.ID
 	if rf, ok := ret.Get(0).(func() p2p.ID); ok {
 		r0 = rf()
@@ -85,6 +101,10 @@ func (_m *PeerEnvelopeSender) ID() p2p.ID {
 func (_m *PeerEnvelopeSender) IsOutbound() bool {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for IsOutbound")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func() bool); ok {
 		r0 = rf()
@@ -99,6 +119,24 @@ func (_m *PeerEnvelopeSender) IsOutbound() bool {
 func (_m *PeerEnvelopeSender) IsPersistent() bool {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for IsPersistent")
+	}
+
+	var r0 bool
+	if rf, ok := ret.Get(0).(func() bool); ok {
+		r0 = rf()
+	} else {
+		r0 = ret.Get(0).(bool)
+	}
+
+	return r0
+}
+
+// HasIPChanged provides a mock function for given fields:
+func (_m *PeerEnvelopeSender) HasIPChanged() bool {
+	ret := _m.Called()
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func() bool); ok {
 		r0 = rf()
@@ -113,6 +151,10 @@ func (_m *PeerEnvelopeSender) IsPersistent() bool {
 func (_m *PeerEnvelopeSender) IsRunning() bool {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for IsRunning")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func() bool); ok {
 		r0 = rf()
@@ -127,6 +169,10 @@ func (_m *PeerEnvelopeSender) IsRunning() bool {
 func (_m *PeerEnvelopeSender) NodeInfo() p2p.NodeInfo {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for NodeInfo")
+	}
+
 	var r0 p2p.NodeInfo
 	if rf, ok := ret.Get(0).(func() p2p.NodeInfo); ok {
 		r0 = rf()
@@ -143,6 +189,10 @@ func (_m *PeerEnvelopeSender) NodeInfo() p2p.NodeInfo {
 func (_m *PeerEnvelopeSender) OnReset() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for OnReset")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -157,6 +207,10 @@ func (_m *PeerEnvelopeSender) OnReset() error {
 func (_m *PeerEnvelopeSender) OnStart() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for OnStart")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -176,6 +230,10 @@ func (_m *PeerEnvelopeSender) OnStop() {
 func (_m *PeerEnvelopeSender) Quit() <-chan struct{} {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Quit")
+	}
+
 	var r0 <-chan struct{}
 	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
 		r0 = rf()
@@ -192,6 +250,10 @@ func (_m *PeerEnvelopeSender) Quit() <-chan struct{} {
 func (_m *PeerEnvelopeSender) RemoteAddr() net.Addr {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for RemoteAddr")
+	}
+
 	var r0 net.Addr
 	if rf, ok := ret.Get(0).(func() net.Addr); ok {
 		r0 = rf()
@@ -208,6 +270,10 @@ func (_m *PeerEnvelopeSender) RemoteAddr() net.Addr {
 func (_m *PeerEnvelopeSender) RemoteIP() net.IP {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for RemoteIP")
+	}
+
 	var r0 net.IP
 	if rf, ok := ret.Get(0).(func() net.IP); ok {
 		r0 = rf()
@@ -224,6 +290,10 @@ func (_m *PeerEnvelopeSender) RemoteIP() net.IP {
 func (_m *PeerEnvelopeSender) Reset() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Reset")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -238,6 +308,10 @@ func (_m *PeerEnvelopeSender) Reset() error {
 func (_m *PeerEnvelopeSender) Send(_a0 byte, _a1 []byte) bool {
 	ret := _m.Called(_a0, _a1)
 
+	if len(ret) == 0 {
+		panic("no return value specified for Send")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func(byte, []byte) bool); ok {
 		r0 = rf(_a0, _a1)
@@ -252,6 +326,10 @@ func (_m *PeerEnvelopeSender) Send(_a0 byte, _a1 []byte) bool {
 func (_m *PeerEnvelopeSender) SendEnvelope(_a0 p2p.Envelope) bool {
 	ret := _m.Called(_a0)
 
+	if len(ret) == 0 {
+		panic("no return value specified for SendEnvelope")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func(p2p.Envelope) bool); ok {
 		r0 = rf(_a0)
@@ -281,6 +359,10 @@ func (_m *PeerEnvelopeSender) SetRemovalFailed() {
 func (_m *PeerEnvelopeSender) SocketAddr() *p2p.NetAddress {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for SocketAddr")
+	}
+
 	var r0 *p2p.NetAddress
 	if rf, ok := ret.Get(0).(func() *p2p.NetAddress); ok {
 		r0 = rf()
@@ -297,6 +379,10 @@ func (_m *PeerEnvelopeSender) SocketAddr() *p2p.NetAddress {
 func (_m *PeerEnvelopeSender) Start() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Start")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -311,6 +397,10 @@ func (_m *PeerEnvelopeSender) Start() error {
 func (_m *PeerEnvelopeSender) Status() conn.ConnectionStatus {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Status")
+	}
+
 	var r0 conn.ConnectionStatus
 	if rf, ok := ret.Get(0).(func() conn.ConnectionStatus); ok {
 		r0 = rf()
@@ -325,6 +415,10 @@ func (_m *PeerEnvelopeSender) Status() conn.ConnectionStatus {
 func (_m *PeerEnvelopeSender) Stop() error {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for Stop")
+	}
+
 	var r0 error
 	if rf, ok := ret.Get(0).(func() error); ok {
 		r0 = rf()
@@ -339,6 +433,10 @@ func (_m *PeerEnvelopeSender) Stop() error {
 func (_m *PeerEnvelopeSender) String() string {
 	ret := _m.Called()
 
+	if len(ret) == 0 {
+		panic("no return value specified for String")
+	}
+
 	var r0 string
 	if rf, ok := ret.Get(0).(func() string); ok {
 		r0 = rf()
@@ -353,6 +451,10 @@ func (_m *PeerEnvelopeSender) String() string {
 func (_m *PeerEnvelopeSender) TrySend(_a0 byte, _a1 []byte) bool {
 	ret := _m.Called(_a0, _a1)
 
+	if len(ret) == 0 {
+		panic("no return value specified for TrySend")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func(byte, []byte) bool); ok {
 		r0 = rf(_a0, _a1)
@@ -367,6 +469,10 @@ func (_m *PeerEnvelopeSender) TrySend(_a0 byte, _a1 []byte) bool {
 func (_m *PeerEnvelopeSender) TrySendEnvelope(_a0 p2p.Envelope) bool {
 	ret := _m.Called(_a0)
 
+	if len(ret) == 0 {
+		panic("no return value specified for TrySendEnvelope")
+	}
+
 	var r0 bool
 	if rf, ok := ret.Get(0).(func(p2p.Envelope) bool); ok {
 		r0 = rf(_a0)
@@ -377,13 +483,12 @@ func (_m *PeerEnvelopeSender) TrySendEnvelope(_a0 p2p.Envelope) bool {
 	return r0
 }
 
-type mockConstructorTestingTNewPeerEnvelopeSender interface {
+// NewPeerEnvelopeSender creates a new instance of PeerEnvelopeSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
+// The first argument is typically a *testing.T value.
+func NewPeerEnvelopeSender(t interface {
 	mock.TestingT
 	Cleanup(func())
-}
-
-// NewPeerEnvelopeSender creates a new instance of PeerEnvelopeSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
-func NewPeerEnvelopeSender(t mockConstructorTestingTNewPeerEnvelopeSender) *PeerEnvelopeSender {
+}) *PeerEnvelopeSender {
 	mock := &PeerEnvelopeSender{}
 	mock.Mock.Test(t)
 
