diff --git a/light/provider/http/http.go b/light/provider/http/http.go
index 430dddd54..f8f00cc3f 100644
--- a/light/provider/http/http.go
+++ b/light/provider/http/http.go
@@ -157,9 +157,18 @@ OUTER_LOOP:
 
 			case regexpTimedOut.MatchString(err.Error()):
 				// we wait and try again with exponential backoff
+				//nolint:gosec
 				time.Sleep(backoffTimeout(uint16(attempt)))
 				continue
 
+			// NOTE: it seems like the context errors are being wrapped in a way that
+			// makes them hard to detect. For now, we just check the error string.
+			case strings.Contains(err.Error(), context.DeadlineExceeded.Error()):
+				return nil, context.DeadlineExceeded
+
+			case ctx.Err() != nil:
+				return nil, ctx.Err()
+
 			// context canceled or connection refused we return the error
 			default:
 				return nil, err
@@ -199,9 +208,18 @@ func (p *http) signedHeader(ctx context.Context, height *int64) (*types.SignedHe
 
 		case regexpTimedOut.MatchString(err.Error()):
 			// we wait and try again with exponential backoff
+			//nolint:gosec
 			time.Sleep(backoffTimeout(uint16(attempt)))
 			continue
 
+		// NOTE: it seems like the context errors are being wrapped in a way that
+		// makes them hard to detect. For now, we just check the error string.
+		case strings.Contains(err.Error(), context.DeadlineExceeded.Error()):
+			return nil, context.DeadlineExceeded
+
+		case ctx.Err() != nil:
+			return nil, ctx.Err()
+
 		// either context was cancelled or connection refused.
 		default:
 			return nil, err
